<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
   http://www.springframework.org/schema/security 
   http://www.springframework.org/schema/security/spring-security-4.1.xsd">

	<!-- Loads ACL related configurations -->
	<import resource="acl-context.xml" />

	<!-- This is where we configure Spring-Security 
	<security:intercept-url pattern="/.*" access="permitAll" />
	
	-->
	<security:http auto-config="true" use-expressions="true"
		request-matcher="regex" >



		
		<security:intercept-url pattern="/login.jsp" access="permitAll" />
		<security:intercept-url pattern="/app/.*" access="permitAll" />
		<security:intercept-url pattern="/images/.*" access="permitAll" />
		<security:intercept-url pattern="/js/.*" access="permitAll" />
		<security:intercept-url pattern="/css/.*" access="permitAll" />
		<security:intercept-url pattern="\A/reports/.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_QUERY') or hasRole('ROLE_INSPECTOR')  or hasRole('ROLE_CONTRACT')  or hasRole('ROLE_INCOMING') or hasRole('ROLE_OUTGOING') or hasRole('ROLE_MOVING')" />
		<security:intercept-url pattern="\A/userdetails/.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_QUERY') or hasRole('ROLE_INSPECTOR') or hasRole('ROLE_USER')  or hasRole('ROLE_CONTRACT')  or hasRole('ROLE_INCOMING') or hasRole('ROLE_OUTGOING') or hasRole('ROLE_MOVING')" />		
		<security:intercept-url pattern="\A/.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_QUERY') or hasRole('ROLE_INSPECTOR') or hasRole('ROLE_USER') or hasRole('ROLE_CONTRACT')  or hasRole('ROLE_INCOMING') or hasRole('ROLE_OUTGOING') or hasRole('ROLE_MOVING')"  method="GET"/>
		<security:intercept-url pattern="\A/inspections.*\Z" access="hasRole('ROLE_INSPECTOR')"/>
		<security:intercept-url pattern="\A/afloatgoodses.*\Z" access="hasRole('ROLE_INSPECTOR') or hasRole('ROLE_ADMIN')"/>
		
		<security:intercept-url pattern="\A/contracts.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_CONTRACT')"/>
		<security:intercept-url pattern="\A/materialdocs/2.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_OUTGOING')"/>
		<security:intercept-url pattern="\A/materialdocs/1.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_INCOMING')"/>
		<security:intercept-url pattern="\A/materialdocs/3.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_MOVING')"/>
		
		<security:intercept-url pattern="\A/.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" method="DELETE"/>
		<security:intercept-url pattern="\A/.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" method="POST"/>
		<security:intercept-url pattern="\A/.*\Z" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" method="PUT"/>
		
		
		
		
		<security:intercept-url pattern="/listmessages\?id=.*" access="permitAll" />
		
		<security:form-login login-page="/login.jsp" authentication-failure-url="/login.jsp" default-target-url="/home.jsp" />

		<security:logout invalidate-session="true"
			logout-success-url="/login.jsp" logout-url="/logout.jsp" />

	</security:http>


	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" />

	</bean>

	<bean id="saltSource"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<property name="userPropertyToUse" value="userName" />
	</bean>

	<!-- Declare an authentication-manager to use a custom userDetailsService

	<security:salt-source ref="saltSource" />
	-->

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			user-service-ref="userDetailsService">
			<security:password-encoder ref="passwordEncoder">
				
				
			</security:password-encoder>


		</security:authentication-provider>
	</security:authentication-manager>

	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the 
		database -->
	<bean
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"
		id="passwordEncoder">


	</bean>

	<!-- An in-memory list of users. No need to access an external database 
		layer. See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
	<!-- john's password: admin jane's password: user mike's password: visitor 
		<security:user-service id="userDetailsService"> <security:user name="john" 
		password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_ADMIN, ROLE_USER, 
		ROLE_VISITOR" /> <security:user name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" 
		authorities="ROLE_USER, ROLE_VISITOR" /> <security:user name="mike" password="127870930d65c57ee65fcc47f2170d38" 
		authorities="ROLE_VISITOR" /> </security:user-service> -->
</beans>